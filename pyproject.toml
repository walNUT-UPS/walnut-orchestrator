[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "walnut-orchestrator"
version = "0.10.2"
description = "walNUT - UPS Management Platform with Network UPS Tools (NUT) integration"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    {name = "walNUT Team"},
]
keywords = ["ups", "nut", "power", "management", "monitoring"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Power (UPS)",
]

dependencies = [
    # FastAPI core
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "anyio>=3.7.0", # for async/sync boundary
    
    # SQLCipher support
    "pysqlcipher3>=1.2.0",
    
    # Encryption and security
    "cryptography>=41.0.0",
    "passlib[bcrypt]>=1.7.4",
    "fastapi-users[sqlalchemy]>=13.0.0",
    # Latest available on PyPI as of now is 7.x
    "fastapi-users-db-sqlalchemy>=7.0.0,<8.0.0",
    "python-jose[cryptography]>=3.3.0",
    "httpx-oauth>=0.12.0",  # OIDC/OAuth support

    # CLI
    "typer>=0.9.0",
    "rich>=13.7.0",
    "click>=8.1.7",
    
    # Monitoring and logging
    "structlog>=23.2.0",
    "python-json-logger>=2.0.7",
    
    # Network and HTTP
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
    "PyYAML>=6.0.1",
    "semver>=3.0.2",
    "python-multipart>=0.0.9",
    
    # JSON Schema validation for plugin manifests
    "jsonschema>=4.21.0",

    # Common HTTP client for drivers and utilities
    "requests>=2.32.3",
    
    # NUT integration
    "pynut2>=2.1.2",
    
    # System utilities
    "psutil>=5.9.6",
    "python-dotenv>=1.0.0",
    
    # SSH connections
    "asyncssh>=2.14.0",
    "paramiko>=3.4.0",
    "netmiko>=4.6.0",

    # MQTT
    "paho-mqtt>=2.1.0",

    # WebSockets
    "websockets>=12.0",
    
    # Date/time handling
    "python-dateutil>=2.8.2",
    
    # JSON handling
    "orjson>=3.9.10",

]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # for testing FastAPI
    "respx>=0.20.0",  # for mocking HTTP requests in tests
    
    # Code quality
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    
    # Development tools
    "pre-commit>=3.5.0",
    "watchfiles>=0.21.0",
]

# Optional transports/protocol clients. Install with:
#   pip install .[transports]
transports = [
    "pysnmp>=4.4.12",
    "pymodbus>=3.6.6",
    "ncclient>=0.6.15",
    "pygnmi>=0.8.16",
]

[project.scripts]
walnut = "walnut.cli.main:app"

[project.urls]
"Homepage" = "https://github.com/walNUT-UPS/walnut-orchestrator"
"Bug Reports" = "https://github.com/walNUT-UPS/walnut-orchestrator/issues"
"Source" = "https://github.com/walNUT-UPS/walnut-orchestrator"

[tool.hatch.build.targets.wheel]
packages = ["walnut"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["walnut"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "pysqlcipher3.*",
    "pynut2.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "ARG001", "S101"]

[tool.black]
target-version = ["py312"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
