server {
  listen 80;
  server_name _;
  client_max_body_size 10m;

  # Serve static frontend
  root /usr/share/nginx/html;
  index index.html;

  # Redirect bare /api to /api/
  location = /api {
    return 301 /api/;
  }

  # Proxy API to backend (match /api and /api/*)
  location ^~ /api {
    proxy_pass http://backend:8000;
    proxy_http_version 1.1;
    proxy_read_timeout 300s;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }


  # Proxy auth endpoints (mounted at /auth in backend)
  location ^~ /auth {
    proxy_pass http://backend:8000;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # WebSocket endpoints (/ws, /ws/*)
  location ^~ /ws {
    proxy_http_version 1.1;
    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    proxy_buffering off;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_pass http://backend:8000;
  }

  # Proxy backend docs (FastAPI docs/openapi) if needed
  location = /docs {
    proxy_pass http://backend:8000/docs;
  }
  location = /openapi.json {
    proxy_pass http://backend:8000/openapi.json;
  }
  location = /redoc {
    proxy_pass http://backend:8000/redoc;
  }

  # Proxy backend health
  location = /health {
    proxy_pass http://backend:8000/health;
  }

  # SPA fallback for client-side routing
  location / {
    try_files $uri /index.html;
  }
}
